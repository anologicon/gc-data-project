DROP TABLE IF EXISTS tb_actual_level;
CREATE TABLE tb_actual_level AS (
	SELECT
		sb.idPlayer,
		sb.vlLevel
	FROM (
		SELECT 
			idLobbyGame,
			idPlayer,
			vlLevel,
			dtCreatedAt,
			row_number() OVER (PARTITION BY idPlayer ORDER BY dtCreatedAt DESC) AS rn
		FROM tb_lobby_stats_player
	) AS sb
	where sb.rn = 1
);

DROP TABLE IF EXISTS players_resume;

CREATE TABLE players_resume AS (
    SELECT
        tpl.idPlayer,
        tb_actual_level.vlLevel AS actualLevel,
        tp.dtRegistration,
        DATEDIFF(DATE(NOW()), tp.dtRegistration) AS qtdDaysSinceRegistration,
        SUM(tpl.flWinner) AS qtdWinns,
        COUNT(*) AS qtdMatches,
        SUM(tpl.abandonedLobby) AS qtdAbandonedLobby,
        SUM(tpl.flWinner) / COUNT(*) AS winRate,
        MIN(tpl.qtHitLeftLegPercentage) AS minQtHitLeftLegPercentage,
        AVG(tpl.qtHitLeftLegPercentage) AS avgQtHitLeftLegPercentage,
        MAX(tpl.qtHitRightArmPercentage) AS maxQtHitRightArmPercentage,
        MIN(tpl.qtHitRightArmPercentage) AS minQtHitRightArmPercentage,
        AVG(tpl.qtHitRightArmPercentage) AS avgQtHitRightArmPercentage,
        MAX(tpl.qtHitLeftAtmPercentage) AS maxQtHitLeftAtmPercentage,
        MIN(tpl.qtHitLeftAtmPercentage) AS minQtHitLeftAtmPercentage,
        AVG(tpl.qtHitLeftAtmPercentage) AS avgQtHitLeftAtmPercentage,
        MAX(tpl.qtHitStomachPercentage) AS maxQtHitStomachPercentage,
        MIN(tpl.qtHitStomachPercentage) AS minQtHitStomachPercentage,
        AVG(tpl.qtHitStomachPercentage) AS avgQtHitStomachPercentage,
        MAX(tpl.qtHitChestPercentage) AS maxQtHitChestPercentage,
        MIN(tpl.qtHitChestPercentage) AS minQtHitChestPercentage,
        AVG(tpl.qtHitChestPercentage) AS avgQtHitChestPercentage,
        MAX(tpl.qtHitHeadshotPercentage) AS maxQtHitHeadshotPercentage,
        MIN(tpl.qtHitHeadshotPercentage) AS minQtHitHeadshotPercentage,
        AVG(tpl.qtHitHeadshotPercentage) AS avgQtHitHeadshotPercentage,
        MAX(tpl.missingShots) AS maxMissingShots,
        MIN(tpl.missingShots) AS minMissingShots,
        AVG(tpl.missingShots) AS avgMissingShots,
        MAX(tpl.shotsHitsPercentage) AS maxShotsHitsPercentage,
        MIN(tpl.shotsHitsPercentage) AS minShotsHitsPercentage,
        AVG(tpl.shotsHitsPercentage) AS avgShotsHitsPercentage,
        ROUND(MAX(tpl.assistDeathRatio), 2) AS maxAssistDeathRatio,
        ROUND(MIN(tpl.assistDeathRatio), 2) AS minAssistDeathRatio,
        ROUND(AVG(tpl.assistDeathRatio), 2) AS avgAssistDeathRatio,
        SUM(tpl.qtKill) / count(*) AS killLobyRatio,
        SUM(tpl.qtDeath) / count(*) AS deathLobyRatio,
        ROUND(AVG(tpl.kdRatio), 2) AS avgKdRatio,
        ROUND(MAX(tpl.kdRatio), 2) AS maxKdRatio,
        ROUND(MIN(tpl.kdRatio), 2) AS minKdRatio,
        ROUND(MAX(tpl.shotsHitsRatio), 2) AS maxShotsHitsRatio,
        ROUND(MIN(tpl.shotsHitsRatio), 2) AS minShotsHitsRatio,
        ROUND(AVG(tpl.shotsHitsRatio), 2) AS avgShotsHitsRatio,
        SUM(tpl.qtTrade) AS qtTrade,
        MAX(tpl.qtTrade) AS maxQtTrade,
        MIN(tpl.qtTrade) AS minQtTrade,
        AVG(tpl.qtTrade) AS avgQtTrade,
        SUM(tpl.qtFlashAssist) AS qtFlashAssist,
        MAX(tpl.qtFlashAssist) AS maxQtFlashAssist,
        MIN(tpl.qtFlashAssist) AS minQtFlashAssist,
        AVG(tpl.qtFlashAssist) AS avgQtFlashAssist,
        SUM(tpl.qtClutchWon) AS qtClutchWon,
        MAX(tpl.qtClutchWon) AS maxQtClutchWon,
        MIN(tpl.qtClutchWon) AS minQtClutchWon,
        AVG(tpl.qtClutchWon) AS avgQtClutchWon,
        SUM(tpl.qtLastAlive) AS qtLastAlive,
        MAX(tpl.qtLastAlive) AS maxQtLastAlive,
        MIN(tpl.qtLastAlive) AS minQtLastAlive,
        AVG(tpl.qtLastAlive) AS avgQtLastAlive,
        SUM(tpl.qtFirstKill) AS qtFirstKill,
        MAX(tpl.qtFirstKill) AS maxQtFirstKill,
        MIN(tpl.qtFirstKill) AS minQtFirstKill,
        AVG(tpl.qtFirstKill) AS avgQtFirstKill,
        SUM(tpl.qtKill) AS qtKill,
        MAX(tpl.qtKill) AS maxQtKill,
        MIN(tpl.qtKill) AS minQtKill,
        AVG(tpl.qtKill) AS avgQtKill,
        SUM(tpl.qtAssist) AS qtAssist,
        MAX(tpl.qtAssist) AS maxQtAssist,
        MIN(tpl.qtAssist) AS minQtAssist,
        AVG(tpl.qtAssist) AS avgQtAssist,
        SUM(tpl.qtDeath) AS qtDeath,
        MAX(tpl.qtDeath) AS maxQtDeath,
        MIN(tpl.qtDeath) AS minQtDeath,
        AVG(tpl.qtDeath) AS avgQtDeath,
        MAX(tpl.vlLevel) AS maxVlLevel,
        MIN(tpl.vlLevel) AS minVlLevel,
        AVG(tpl.vlLevel) AS avgVlLevel,
        SUM(tpl.qtHs) AS qtHs,
        MAX(tpl.qtHs) AS maxQtHs,
        MIN(tpl.qtHs) AS minQtHs,
        AVG(tpl.qtHs) AS avgQtHs,
        SUM(tpl.qtBombeDefuse) AS qtBombeDefuse,
        MAX(tpl.qtBombeDefuse) AS maxQtBombeDefuse,
        MIN(tpl.qtBombeDefuse) AS minQtBombeDefuse,
        AVG(tpl.qtBombeDefuse) AS avgQtBombeDefuse,
        SUM(tpl.qtBombePlant) AS qtBombePlant,
        MAX(tpl.qtBombePlant) AS maxQtBombePlant,
        MIN(tpl.qtBombePlant) AS minQtBombePlant,
        AVG(tpl.qtBombePlant) AS avgQtBombePlant,
        SUM(tpl.qt1Kill) AS qt1Kill,
        MAX(tpl.qt1Kill) AS maxQt1Kill,
        MIN(tpl.qt1Kill) AS minQt1Kill,
        AVG(tpl.qt1Kill) AS avgQt1Kill,
        SUM(tpl.qt2Kill) AS qt2Kill,
        MAX(tpl.qt2Kill) AS maxQt2Kill,
        MIN(tpl.qt2Kill) AS minQt2Kill,
        AVG(tpl.qt2Kill) AS avgQt2Kill,
        SUM(tpl.qt3Kill) AS qt3Kill,
        MAX(tpl.qt3Kill) AS maxQt3Kill,
        MIN(tpl.qt3Kill) AS minQt3Kill,
        AVG(tpl.qt3Kill) AS avgQt3Kill,
        SUM(tpl.qt4Kill) AS qt4Kill,
        MAX(tpl.qt4Kill) AS maxQt4Kill,
        MIN(tpl.qt4Kill) AS minQt4Kill,
        AVG(tpl.qt4Kill) AS avgQt4Kill,
        SUM(tpl.qt5Kill) AS qt5Kill,
        MAX(tpl.qt5Kill) AS maxQt5Kill,
        MIN(tpl.qt5Kill) AS minQt5Kill,
        AVG(tpl.qt5Kill) AS avgQt5Kill,
        SUM(de_mirage_map) AS qtdPlaysMirage,
        SUM(de_inferno_map) AS qtdPlaysInferno,
        SUM(de_dust2_map) AS qtdPlaysDust2,
        SUM(de_vertigo_map) AS qtdPlaysVertigo,
        SUM(de_overpass_map) AS qtdPlaysOverpass,
        SUM(de_nuke_map) AS qtdPlaysNuke,
        SUM(de_train_map) AS qtdPlaysTrain,
        SUM(de_ancient_map) AS qtdPlaysAncient
    FROM tb_player_lobby AS tpl
    LEFT JOIN tb_actual_level ON tpl.idPlayer = tb_actual_level.idPlayer
    LEFT JOIN tb_players AS tp ON tpl.idPlayer = tp.idPlayer
    GROUP BY tpl.idPlayer
);
